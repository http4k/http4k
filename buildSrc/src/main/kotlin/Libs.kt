import kotlin.String

/**
 * Generated by [gradle-kotlin-dsl-libs](https://github.com/jmfayard/gradle-kotlin-dsl-libs)
 *
 * Run again
 *   `$ ./gradlew syncLibs`
 * to update this file */
object Libs {
    /**
     * [alpn-boot website](http://www.eclipse.org/jetty) */
    const val alpn_boot: String = "org.mortbay.jetty.alpn:alpn-boot:" + Versions.alpn_boot

    /**
     * [argo website](http://argo.sourceforge.net) */
    const val argo: String = "net.sourceforge.argo:argo:" + Versions.argo

    /**
     * [cobertura website](http://cobertura.sourceforge.net) */
    const val cobertura: String = "net.sourceforge.cobertura:cobertura:" + Versions.cobertura

    const val com_github_kt3k_coveralls_gradle_plugin: String =
            "com.github.kt3k.coveralls:com.github.kt3k.coveralls.gradle.plugin:" + Versions.com_github_kt3k_coveralls_gradle_plugin

    const val com_jfrog_bintray_gradle_plugin: String =
            "com.jfrog.bintray:com.jfrog.bintray.gradle.plugin:" + Versions.com_jfrog_bintray_gradle_plugin

    /**
     * [commons-pool2 website](http://commons.apache.org/proper/commons-pool/) */
    const val commons_pool2: String = "org.apache.commons:commons-pool2:" + Versions.commons_pool2

    /**
     * [coveralls-gradle-plugin website](https://github.com/kt3k/coveralls-gradle-plugin) */
    const val coveralls_gradle_plugin: String =
            "org.kt3k.gradle.plugin:coveralls-gradle-plugin:" + Versions.coveralls_gradle_plugin

    const val dokka_gradle_plugin: String =
            "org.jetbrains.dokka:dokka-gradle-plugin:" + Versions.dokka_gradle_plugin

    /**
     * [gradle-cobertura-plugin website](https://github.com/stevesaliman/gradle-cobertura-plugin) */
    const val gradle_cobertura_plugin: String =
            "net.saliman:gradle-cobertura-plugin:" + Versions.gradle_cobertura_plugin

    /**
     * [gson website](https://github.com/google/gson) */
    const val gson: String = "com.google.code.gson:gson:" + Versions.gson

    /**
     * [hamkrest website](https://github.com/npryce/hamkrest) */
    const val hamkrest: String = "com.natpryce:hamkrest:" + Versions.hamkrest

    /**
     * [handlebars website](https://github.com/jknack/handlebars.java) */
    const val handlebars: String = "com.github.jknack:handlebars:" + Versions.handlebars

    /**
     * [http2-server website](https://eclipse.org/jetty) */
    const val http2_server: String = "org.eclipse.jetty.http2:http2-server:" + Versions.http2_server

    /**
     * [httpasyncclient website](http://hc.apache.org/httpcomponents-asyncclient) */
    const val httpasyncclient: String =
            "org.apache.httpcomponents:httpasyncclient:" + Versions.httpasyncclient

    /**
     * [httpclient website](http://hc.apache.org/httpcomponents-client) */
    const val httpclient: String = "org.apache.httpcomponents:httpclient:" + Versions.httpclient

    /**
     * [httpcore website](http://hc.apache.org/httpcomponents-core-ga) */
    const val httpcore: String = "org.apache.httpcomponents:httpcore:" + Versions.httpcore

    /**
     * [jackson-module-kotlin website](https://github.com/FasterXML/jackson-module-kotlin) */
    const val jackson_module_kotlin: String =
            "com.fasterxml.jackson.module:jackson-module-kotlin:" + Versions.jackson_module_kotlin

    /**
     * [Java-WebSocket website](https://github.com/TooTallNate/Java-WebSocket) */
    const val java_websocket: String =
            "org.java-websocket:Java-WebSocket:" + Versions.java_websocket

    /**
     * [javax.servlet-api website](https://javaee.github.io/servlet-spec/) */
    const val javax_servlet_api: String =
            "javax.servlet:javax.servlet-api:" + Versions.javax_servlet_api

    /**
     * [javax-websocket-server-impl website](http://www.eclipse.org/jetty) */
    const val javax_websocket_server_impl: String =
            "org.eclipse.jetty.websocket:javax-websocket-server-impl:" + Versions.javax_websocket_server_impl

    /**
     * [jetty-alpn-conscrypt-server website](https://eclipse.org/jetty) */
    const val jetty_alpn_conscrypt_server: String =
            "org.eclipse.jetty:jetty-alpn-conscrypt-server:" + Versions.jetty_alpn_conscrypt_server

    /**
     * [jetty-client website](http://www.eclipse.org/jetty) */
    const val jetty_client: String = "org.eclipse.jetty:jetty-client:" + Versions.jetty_client

    /**
     * [jetty-server website](http://www.eclipse.org/jetty) */
    const val jetty_server: String = "org.eclipse.jetty:jetty-server:" + Versions.jetty_server

    /**
     * [jetty-servlet website](http://www.eclipse.org/jetty) */
    const val jetty_servlet: String = "org.eclipse.jetty:jetty-servlet:" + Versions.jetty_servlet

    const val jmfayard_github_io_gradle_kotlin_dsl_libs_gradle_plugin: String =
            "jmfayard.github.io.gradle-kotlin-dsl-libs:jmfayard.github.io.gradle-kotlin-dsl-libs.gradle.plugin:" + Versions.jmfayard_github_io_gradle_kotlin_dsl_libs_gradle_plugin

    /**
     * [json website](https://github.com/douglascrockford/JSON-java) */
    const val json: String = "org.json:json:" + Versions.json

    /**
     * [jsoup website](https://jsoup.org/) */
    const val jsoup: String = "org.jsoup:jsoup:" + Versions.jsoup

    /**
     * [junit-jupiter-api website](http://junit.org/junit5/) */
    const val junit_jupiter_api: String =
            "org.junit.jupiter:junit-jupiter-api:" + Versions.junit_jupiter_api

    /**
     * [junit-jupiter-engine website](http://junit.org/junit5/) */
    const val junit_jupiter_engine: String =
            "org.junit.jupiter:junit-jupiter-engine:" + Versions.junit_jupiter_engine

    /**
     * [kotlin-gradle-plugin website](https://kotlinlang.org/) */
    const val kotlin_gradle_plugin: String =
            "org.jetbrains.kotlin:kotlin-gradle-plugin:" + Versions.kotlin_gradle_plugin

    /**
     * [kotlin-reflect website](https://kotlinlang.org/) */
    const val kotlin_reflect: String =
            "org.jetbrains.kotlin:kotlin-reflect:" + Versions.kotlin_reflect

    /**
     * [kotlin-scripting-compiler-embeddable website](https://kotlinlang.org/) */
    const val kotlin_scripting_compiler_embeddable: String =
            "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:" + Versions.kotlin_scripting_compiler_embeddable

    /**
     * [kotlin-stdlib-jdk8 website](https://kotlinlang.org/) */
    const val kotlin_stdlib_jdk8: String =
            "org.jetbrains.kotlin:kotlin-stdlib-jdk8:" + Versions.kotlin_stdlib_jdk8

    /**
     * [micrometer-core website](https://github.com/micrometer-metrics/micrometer) */
    const val micrometer_core: String = "io.micrometer:micrometer-core:" + Versions.micrometer_core

    /**
     * [moshi website](https://github.com/square/moshi) */
    const val moshi: String = "com.squareup.moshi:moshi:" + Versions.moshi

    /**
     * [moshi-kotlin website](https://github.com/square/moshi) */
    const val moshi_kotlin: String = "com.squareup.moshi:moshi-kotlin:" + Versions.moshi_kotlin

    const val nebula_provided_base_gradle_plugin: String =
            "nebula.provided-base:nebula.provided-base.gradle.plugin:" + Versions.nebula_provided_base_gradle_plugin

    const val net_saliman_cobertura_gradle_plugin: String =
            "net.saliman.cobertura:net.saliman.cobertura.gradle.plugin:" + Versions.net_saliman_cobertura_gradle_plugin

    /**
     * [netty-codec-http2 website](http://netty.io/) */
    const val netty_codec_http2: String = "io.netty:netty-codec-http2:" + Versions.netty_codec_http2

    /**
     * [okhttp website](https://github.com/square/okhttp) */
    const val okhttp: String = "com.squareup.okhttp3:okhttp:" + Versions.okhttp

    /**
     * [pebble website](http://pebbletemplates.io) */
    const val pebble: String = "io.pebbletemplates:pebble:" + Versions.pebble

    /**
     * [rerunner-jupiter website](https://github.com/artsok/rerunner-jupiter) */
    const val rerunner_jupiter: String =
            "io.github.artsok:rerunner-jupiter:" + Versions.rerunner_jupiter

    /**
     * [resilience4j-bulkhead website](https://github.com/resilience4j/resilience4j) */
    const val resilience4j_bulkhead: String =
            "io.github.resilience4j:resilience4j-bulkhead:" + Versions.resilience4j_bulkhead

    /**
     * [resilience4j-circuitbreaker website](https://github.com/resilience4j/resilience4j) */
    const val resilience4j_circuitbreaker: String =
            "io.github.resilience4j:resilience4j-circuitbreaker:" + Versions.resilience4j_circuitbreaker

    /**
     * [resilience4j-ratelimiter website](https://github.com/resilience4j/resilience4j) */
    const val resilience4j_ratelimiter: String =
            "io.github.resilience4j:resilience4j-ratelimiter:" + Versions.resilience4j_ratelimiter

    /**
     * [resilience4j-retry website](https://github.com/resilience4j/resilience4j) */
    const val resilience4j_retry: String =
            "io.github.resilience4j:resilience4j-retry:" + Versions.resilience4j_retry

    /**
     * [selenium-api website](http://www.seleniumhq.org/) */
    const val selenium_api: String = "org.seleniumhq.selenium:selenium-api:" + Versions.selenium_api

    /**
     * [thymeleaf website](http://www.thymeleaf.org) */
    const val thymeleaf: String = "org.thymeleaf:thymeleaf:" + Versions.thymeleaf

    /**
     * [undertow-core website](http://www.jboss.org) */
    const val undertow_core: String = "io.undertow:undertow-core:" + Versions.undertow_core

    /**
     * [undertow-servlet website](http://www.jboss.org) */
    const val undertow_servlet: String = "io.undertow:undertow-servlet:" + Versions.undertow_servlet
}
