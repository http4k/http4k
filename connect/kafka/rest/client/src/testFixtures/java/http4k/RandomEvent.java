/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package http4k;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/** Random event */
@org.apache.avro.specific.AvroGenerated
public class RandomEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1567561313859312136L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RandomEvent\",\"namespace\":\"http4k\",\"doc\":\"Random event\",\"fields\":[{\"name\":\"localDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"localTime\",\"type\":{\"type\":\"int\",\"logicalType\":\"time-millis\"}},{\"name\":\"instant\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"localDateTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimeMillisConversion());
  }

  private static final BinaryMessageEncoder<RandomEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RandomEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RandomEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RandomEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RandomEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RandomEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RandomEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RandomEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RandomEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.time.LocalDate localDate;
  private java.time.LocalTime localTime;
  private java.time.Instant instant;
  private java.time.LocalDateTime localDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RandomEvent() {}

  /**
   * All-args constructor.
   * @param localDate The new value for localDate
   * @param localTime The new value for localTime
   * @param instant The new value for instant
   * @param localDateTime The new value for localDateTime
   */
  public RandomEvent(java.time.LocalDate localDate, java.time.LocalTime localTime, java.time.Instant instant, java.time.LocalDateTime localDateTime) {
    this.localDate = localDate;
    this.localTime = localTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.instant = instant.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.localDateTime = localDateTime;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return localDate;
    case 1: return localTime;
    case 2: return instant;
    case 3: return localDateTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.DateConversion(),
      new org.apache.avro.data.TimeConversions.TimeMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: localDate = (java.time.LocalDate)value$; break;
    case 1: localTime = (java.time.LocalTime)value$; break;
    case 2: instant = (java.time.Instant)value$; break;
    case 3: localDateTime = (java.time.LocalDateTime)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'localDate' field.
   * @return The value of the 'localDate' field.
   */
  public java.time.LocalDate getLocalDate() {
    return localDate;
  }


  /**
   * Sets the value of the 'localDate' field.
   * @param value the value to set.
   */
  public void setLocalDate(java.time.LocalDate value) {
    this.localDate = value;
  }

  /**
   * Gets the value of the 'localTime' field.
   * @return The value of the 'localTime' field.
   */
  public java.time.LocalTime getLocalTime() {
    return localTime;
  }


  /**
   * Sets the value of the 'localTime' field.
   * @param value the value to set.
   */
  public void setLocalTime(java.time.LocalTime value) {
    this.localTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'instant' field.
   * @return The value of the 'instant' field.
   */
  public java.time.Instant getInstant() {
    return instant;
  }


  /**
   * Sets the value of the 'instant' field.
   * @param value the value to set.
   */
  public void setInstant(java.time.Instant value) {
    this.instant = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'localDateTime' field.
   * @return The value of the 'localDateTime' field.
   */
  public java.time.LocalDateTime getLocalDateTime() {
    return localDateTime;
  }


  /**
   * Sets the value of the 'localDateTime' field.
   * @param value the value to set.
   */
  public void setLocalDateTime(java.time.LocalDateTime value) {
    this.localDateTime = value;
  }

  /**
   * Creates a new RandomEvent RecordBuilder.
   * @return A new RandomEvent RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new RandomEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RandomEvent RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new RandomEvent RecordBuilder by copying an existing RandomEvent instance.
   * @param other The existing instance to copy.
   * @return A new RandomEvent RecordBuilder
   */
  public static Builder newBuilder(RandomEvent other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for RandomEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RandomEvent>
    implements org.apache.avro.data.RecordBuilder<RandomEvent> {

    private java.time.LocalDate localDate;
    private java.time.LocalTime localTime;
    private java.time.Instant instant;
    private java.time.LocalDateTime localDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.localDate)) {
        this.localDate = data().deepCopy(fields()[0].schema(), other.localDate);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.localTime)) {
        this.localTime = data().deepCopy(fields()[1].schema(), other.localTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.instant)) {
        this.instant = data().deepCopy(fields()[2].schema(), other.instant);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.localDateTime)) {
        this.localDateTime = data().deepCopy(fields()[3].schema(), other.localDateTime);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing RandomEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(RandomEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.localDate)) {
        this.localDate = data().deepCopy(fields()[0].schema(), other.localDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.localTime)) {
        this.localTime = data().deepCopy(fields()[1].schema(), other.localTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instant)) {
        this.instant = data().deepCopy(fields()[2].schema(), other.instant);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.localDateTime)) {
        this.localDateTime = data().deepCopy(fields()[3].schema(), other.localDateTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'localDate' field.
      * @return The value.
      */
    public java.time.LocalDate getLocalDate() {
      return localDate;
    }


    /**
      * Sets the value of the 'localDate' field.
      * @param value The value of 'localDate'.
      * @return This builder.
      */
    public Builder setLocalDate(java.time.LocalDate value) {
      validate(fields()[0], value);
      this.localDate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'localDate' field has been set.
      * @return True if the 'localDate' field has been set, false otherwise.
      */
    public boolean hasLocalDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'localDate' field.
      * @return This builder.
      */
    public Builder clearLocalDate() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'localTime' field.
      * @return The value.
      */
    public java.time.LocalTime getLocalTime() {
      return localTime;
    }


    /**
      * Sets the value of the 'localTime' field.
      * @param value The value of 'localTime'.
      * @return This builder.
      */
    public Builder setLocalTime(java.time.LocalTime value) {
      validate(fields()[1], value);
      this.localTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'localTime' field has been set.
      * @return True if the 'localTime' field has been set, false otherwise.
      */
    public boolean hasLocalTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'localTime' field.
      * @return This builder.
      */
    public Builder clearLocalTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'instant' field.
      * @return The value.
      */
    public java.time.Instant getInstant() {
      return instant;
    }


    /**
      * Sets the value of the 'instant' field.
      * @param value The value of 'instant'.
      * @return This builder.
      */
    public Builder setInstant(java.time.Instant value) {
      validate(fields()[2], value);
      this.instant = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'instant' field has been set.
      * @return True if the 'instant' field has been set, false otherwise.
      */
    public boolean hasInstant() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'instant' field.
      * @return This builder.
      */
    public Builder clearInstant() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'localDateTime' field.
      * @return The value.
      */
    public java.time.LocalDateTime getLocalDateTime() {
      return localDateTime;
    }


    /**
      * Sets the value of the 'localDateTime' field.
      * @param value The value of 'localDateTime'.
      * @return This builder.
      */
    public Builder setLocalDateTime(java.time.LocalDateTime value) {
      validate(fields()[3], value);
      this.localDateTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'localDateTime' field has been set.
      * @return True if the 'localDateTime' field has been set, false otherwise.
      */
    public boolean hasLocalDateTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'localDateTime' field.
      * @return This builder.
      */
    public Builder clearLocalDateTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RandomEvent build() {
      try {
        RandomEvent record = new RandomEvent();
        record.localDate = fieldSetFlags()[0] ? this.localDate : (java.time.LocalDate) defaultValue(fields()[0]);
        record.localTime = fieldSetFlags()[1] ? this.localTime : (java.time.LocalTime) defaultValue(fields()[1]);
        record.instant = fieldSetFlags()[2] ? this.instant : (java.time.Instant) defaultValue(fields()[2]);
        record.localDateTime = fieldSetFlags()[3] ? this.localDateTime : (java.time.LocalDateTime) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RandomEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<RandomEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RandomEvent>
    READER$ = (org.apache.avro.io.DatumReader<RandomEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










