description = "http4k typesafe HTTP contracts and OpenApi support"

apply plugin: "org.openapi.generator"

dependencies {
    api(project(":http4k-core"))
    api(project(":http4k-contract-jsonschema"))

    implementation("dev.forkhandles:values4k:_")
    implementation(project(":http4k-security-oauth"))
    implementation(project(":http4k-format-jackson"))
    implementation(project(":http4k-multipart"))
    implementation(project(":http4k-security-jwt"))

    testImplementation("dev.forkhandles:values4k:_")
    testImplementation(project(":http4k-format-jackson"))
    testImplementation(project(":http4k-format-argo"))
    testImplementation(project(":http4k-testing-approval"))
    testImplementation(testFixtures(project(":http4k-core")))
    testImplementation(testFixtures(project(":http4k-security-oauth")))
    testImplementation(testFixtures(project(":http4k-security-jwt")))
}

task generateOpenApi3AutoClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin"
    outputDir = "."
    validateSpec = false
    inputSpec = "$projectDir/src/test/resources/org/http4k/contract/openapi/v3/OpenApi3AutoTest.renders as expected.approved".toString()
    inputs.file(inputSpec)
}

task generateOpenApi3Client(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin"
    outputDir = "."
    validateSpec = false
    inputSpec = "$projectDir/src/test/resources/org/http4k/contract/openapi/v3/OpenApi3Test.renders as expected.approved".toString()
    inputs.file(inputSpec)
    mustRunAfter(generateOpenApi3AutoClient)
}

task generateOpenApi2Client(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin"
    outputDir = "."
    validateSpec = false
    inputSpec = "$projectDir/src/test/resources/org/http4k/contract/openapi/v2/OpenApi2Test.renders as expected.approved".toString()
    inputs.file(inputSpec)
    mustRunAfter(generateOpenApi3Client)
}

compileKotlin.dependsOn(["generateOpenApi3AutoClient", "generateOpenApi3Client", "generateOpenApi2Client"])
processResources.dependsOn(["generateOpenApi3AutoClient", "generateOpenApi3Client", "generateOpenApi2Client"])
processTestResources.dependsOn(["generateOpenApi3AutoClient", "generateOpenApi3Client", "generateOpenApi2Client"])
