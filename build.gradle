buildscript {
    apply from: project.file('dependencies.gradle')

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.6"
        classpath 'net.saliman:gradle-cobertura-plugin:2.0.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id 'net.saliman.cobertura' version '2.4.0'
    id 'com.github.kt3k.coveralls' version '2.8.1'
}

allprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'cobertura'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'provided-base'

    jacoco {
        toolVersion = '0.7.9'
    }

    cobertura.coverageFormats = ['html', 'xml']
    cobertura.coverageSourceDirs = ['src/main/kotlin']

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = project.hasProperty('releaseVersion') ? project.releaseVersion : 'LOCAL'
    group = 'org.http4k'

    compileTestKotlin {
        kotlinOptions {
            languageVersion = "1.1"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }

    artifacts {
        testArtifacts testJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                mavenJava(MavenPublication) {
                    artifactId = archivesBaseName

                    pom.withXml {
                        asNode().appendNode('name', archivesBaseName)
                        asNode().appendNode('description', description)
                        asNode().appendNode('url', 'https://http4k.org')
                        asNode().appendNode('developers')
                                .appendNode('developer').appendNode('name', 'Ivan Sanchez').parent().appendNode('email', 'ivan@http4k.org')
                                .parent().parent()
                                .appendNode('developer').appendNode('name', 'David Denton').parent().appendNode('email', 'david@http4k.org')
                        asNode().appendNode('scm').
                                appendNode('url', 'git@github.com:http4k/' + archivesBaseName + '.git').parent().
                                appendNode('connection', 'scm:git:git@github.com:http4k/' + archivesBaseName + '.git').parent().
                                appendNode('developerConnection', 'scm:git:git@github.com:http4k/' + archivesBaseName + '.git')
                        asNode().appendNode('licenses').appendNode('license').
                                appendNode('name', 'Apache License, Version 2.0').parent().
                                appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html')
                    }
                    from components.java

                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')

        publications = ['mavenJava']
        dryRun = false
        publish = true
        pkg {
            repo = 'maven'
            userOrg = 'http4k'
            name = project.name

            desc = description
            websiteUrl = 'https://github.com/http4k/http4k'
            issueTrackerUrl = 'https://github.com/http4k/http4k/issues'
            vcsUrl = 'https://github.com/http4k/http4k.git'
            licenses = ['Apache-2.0']
            labels = []
            publicDownloadNumbers = true
            version {
                name = project.version
                vcsTag = project.version
                gpg {
                    sign = true
                }
                mavenCentralSync {
                    sync = false
                    user = System.getenv('SONATYPE_USER')
                    password = System.getenv('SONATYPE_KEY')
                    close = '1'
                }
            }
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoRootReport.xml"
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoRootReport.xml"
    }
}

dependencies {
    provided kotlin_lib

    provided project(":http4k-aws")
    provided project(":http4k-core")
    provided project(":http4k-client-apache")
    provided project(":http4k-client-okhttp")
    provided project(":http4k-contract")
    provided project(":http4k-format-argo")
    provided project(":http4k-format-gson")
    provided project(":http4k-format-jackson")
    provided project(":http4k-format-xml")
    provided project(":http4k-multipart")
    provided project(":http4k-resilience4j")
    provided project(":http4k-server-jetty")
    provided project(":http4k-server-netty")
    provided project(":http4k-server-undertow")
    provided project(":http4k-template-dust")
    provided project(":http4k-template-handlebars")
    provided project(":http4k-template-pebble")
    provided project(":http4k-template-thymeleaf")
    provided project(":http4k-template-dust")
    provided project(":http4k-testing-hamkrest")
    provided project(":http4k-testing-webdriver")

    testCompile testing
}

sourceSets {
    test {
        kotlin {
            srcDirs 'src/test/kotlin'
            srcDirs 'src/docs'
        }
        resources {
            srcDir 'src/docs'
        }
    }
}