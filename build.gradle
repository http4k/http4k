buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath Libs.kotlin_gradle_plugin
        classpath Libs.openapi_generator_gradle_plugin
        classpath Libs.kotlin_serialization
        classpath Libs.ktlint_gradle
        classpath Libs.shadow
    }
}

plugins {
    id "com.jfrog.bintray"
    id "io.codearte.nexus-staging" version '0.22.0'
}

apply plugin: 'io.codearte.nexus-staging'

allprojects {
    repositories {
        maven {
            url "https://dl.bintray.com/fnproject/fnproject"
        }

        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'

    compileKotlin.kotlinOptions.jvmTarget = "1.8"
    compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = project.hasProperty('releaseVersion') ? project.releaseVersion : 'LOCAL'
    group = 'org.http4k'

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = '0.8.6'
    }

    ktlint {
        // for details, see description in .editorconfig file
        enableExperimentalRules = false
        version = "0.40.0"
        debug = false
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

subprojects {

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    jar {
        manifest {
            attributes(
                'http4k_version': archiveVersion
            )
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }

    configurations {
        testArtifacts.extendsFrom testApi
    }

    artifacts {
        testArtifacts testJar
        archives sourcesJar, javadocJar
    }

    if (hasAnArtifact(project)) {
        def enableSigning = project.findProperty('sign') == "true"

        apply plugin: 'com.jfrog.bintray'
        apply plugin: 'maven-publish' // required to configure bintray

        apply plugin: 'maven' // required to upload to sonatype

        if (enableSigning) { // when added it expects signing keys to be configured
            apply plugin: 'signing'

            signing {
                def signingKey = findProperty("signingKey")
                def signingPassword = findProperty("signingPassword")

                useInMemoryPgpKeys(signingKey, signingPassword)
                sign publishing.publications
            }
        }

        def nexusUsername = project.findProperty('nexusUsername') ?: "notset"
        def nexusPassword = project.findProperty('nexusPassword') ?: "notset"

        publishing {
            repositories {
                maven {
                    name 'SonatypeStaging'
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    credentials {
                        username nexusUsername
                        password nexusPassword
                    }
                }
                maven {
                    name 'SonatypeSnapshot'
                    url 'https://oss.sonatype.org/content/repositories/snapshots/'
                    credentials {
                        username nexusUsername
                        password nexusPassword
                    }
                }
            }

            publications {
                mavenJava(MavenPublication) {
                    artifactId = archivesBaseName

                    pom.withXml {
                        asNode().appendNode('name', archivesBaseName)
                        asNode().appendNode('description', description)
                        asNode().appendNode('url', 'https://http4k.org')
                        asNode().appendNode('developers')
                            .appendNode('developer').appendNode('name', 'Ivan Sanchez').parent().appendNode('email', 'ivan@http4k.org')
                            .parent().parent()
                            .appendNode('developer').appendNode('name', 'David Denton').parent().appendNode('email', 'david@http4k.org')
                        asNode().appendNode('scm').
                            appendNode('url', 'git@github.com:http4k/' + archivesBaseName + '.git').parent().
                            appendNode('connection', 'scm:git:git@github.com:http4k/http4k.git').parent().
                            appendNode('developerConnection', 'scm:git:git@github.com:http4k/http4k.git')
                        asNode().appendNode('licenses').appendNode('license').
                            appendNode('name', 'Apache License, Version 2.0').parent().
                            appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html')
                    }
                    from components.java

                    // replace all runtime dependencies with provided
                    pom.withXml {
                        asNode().dependencies.'*'.findAll() {
                            it.scope.text() == 'runtime'
                        }.each() {
                            it.scope*.value = 'provided'
                        }
                    }
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }

        bintray {
            user = System.getenv('BINTRAY_USER')
            key = System.getenv('BINTRAY_KEY')

            publications = ['mavenJava']
            dryRun = false
            publish = true
            pkg {
                repo = 'maven'
                userOrg = 'http4k'
                name = project.name

                desc = description
                websiteUrl = 'https://github.com/http4k/http4k'
                issueTrackerUrl = 'https://github.com/http4k/http4k/issues'
                vcsUrl = 'https://github.com/http4k/http4k.git'
                licenses = ['Apache-2.0']
                labels = []
                publicDownloadNumbers = true
                version {
                    name = project.version
                    vcsTag = project.version
                    gpg {
                        sign = true
                    }
                    mavenCentralSync {
                        sync = false
                        user = System.getenv('SONATYPE_USER')
                        password = System.getenv('SONATYPE_KEY')
                        close = '1'
                    }
                }
            }
        }
    }

}

compileTestKotlin.kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs += "-Xjvm-default=enable"
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData().from(subprojects
        .findAll { it.name != 'http4k-bom' && hasAnArtifact(it) }
        .jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
    }
}

dependencies {
    subprojects
        .findAll {
            hasAnArtifact(it)
        }
        .forEach {
            api project(it.name)
            testImplementation project(path: it.name, configuration: 'testArtifacts')
        }

    testImplementation(Libs.s3) {
        exclude group: "software.amazon.awssdk", module: "netty-nio-client"
        exclude group: "software.amazon.awssdk", module: "apache-client"
    }
    testImplementation Libs.graphql_kotlin_schema_generator
    testImplementation Config.TestDependencies
}

private boolean hasAnArtifact(Project it) {
    !it.name.contains("test-function") && !it.name.contains("integration-test")
}

sourceSets {
    test {
        kotlin {
            srcDirs 'src/test/kotlin'
            srcDirs 'src/docs'
        }
        resources {
            srcDir 'src/docs'
        }
    }
}

tasks.create("listProjects") {
    doLast {
        subprojects
            .findAll { hasAnArtifact(it) }
            .forEach { System.err.println(it.name) }
    }
}
